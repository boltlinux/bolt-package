#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Tobias Koch <tobias.koch@nonterra.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import os
import sys
import getopt

# make bolt-pack relocatable
INSTALL_DIR = os.path.normpath(os.path.dirname(
    os.path.realpath(sys.argv[0])) + os.sep + ".." )
sys.path.insert(1, INSTALL_DIR + os.sep + 'lib')

from com.nonterra.bolt.package.appconfig import AppConfig
from com.nonterra.bolt.package.packagecontrol import PackageControl
from com.nonterra.bolt.package.error import XPackError, InvocationError
from com.nonterra.bolt.package.util import switch

BOLT_VERSION = "1.0.0"
BOLT_ERR_INVOCATION = 1
BOLT_ERR_RUNTIME    = 2

def print_usage():
    print(
        "Bolt OS Package Generator, version %s                                          \n"
        "Copyright (C) 2016-2017 Tobias Koch <tobias.koch@nonterra.com>                 \n"
        "                                                                               \n"
        "USAGE:                                                                         \n"
        "                                                                               \n"
        "  bolt-pack [OPTIONS] <specfile>                                               \n"
        "                                                                               \n"
        "PACKAGE BUILD OPTIONS:                                                         \n"
        "                                                                               \n"
        "  --ignore-deps        Ignore missing build dependencies.                      \n"
        "  --no-debug-pkgs      Don't generate debug packages.                          \n"
        "                                                                               \n"
        "  -o --outdir=<dir>    Place resulting binary packages in this directory.      \n"
        "                                                                               \n"
        "  -u --unpack          Unpack and patch the sources.                           \n"
        "  -p --prepare         Run the prepare target defined in the rules file.       \n"
        "  -b --build           Run the build target defined in the rules file.         \n"
        "  -i --install         Run the install target defined in the rules file.       \n"
        "  -r --repackage       Run the install target and generate binary packages.    \n"
        "                                                                               \n"
        "  --packages=<list>    A comma-separated list of binary packages. Only the     \n"
        "                       binary packages in this list will be generated.         \n"
        "                                                                               \n"
        "BUILD TOOLS PACKAGES:                                                          \n"
        "                                                                               \n"
        "  --build-for=<what>   Specify if a package should be built for the target     \n"
        "                       or for the tools folder. `what` must be one of 'target' \n"
        "                       (default), 'tools' or 'cross-tools'.                    \n"
        "                                                                               \n"
        "MISCELLANEOUS OPTIONS:                                                         \n"
        "                                                                               \n"
        "  -h --help            Print this help message.                                \n"
        "  --list-deps          List all build dependencies.                            \n"
        "  --work-dir=<dir>     Change to the given directory before running actions.   \n"
        % BOLT_VERSION
    )
#end function

def parse_cmd_line():
    # define default configuration
    config = {
        "action": "default",
        "outdir": None,
        "format": "deb",
        "ignore_deps": False,
        "debug_pkgs": True,
        "build_type": None,
        "host_type": None,
        "target_type": None,
        "build_for": "target",
        "packages": [],
        "work_dir": None
    }

    try:
        opts, args = getopt.getopt(sys.argv[1:], "ho:upbir", [
            "help",
            "list-deps",
            "ignore-deps",
            "no-debug-pkgs",
            "outdir=",
            "unpack",
            "prepare",
            "build",
            "install",
            "repackage",
            "packages=",
            "build-for=",
            "work-dir="
        ])
    except getopt.GetoptError as e:
        raise InvocationError("Error parsing command line: %s" % str(e))

    for o, v in opts:
        for case in switch(o):
            if case("--help", "-h"):
                print_usage()
                sys.exit(0)
                break
            if case("--list-deps"):
                config["action"] = "list_deps"
                break
            if case("--ignore-deps"):
                config["ignore_deps"] = True
                break
            if case("--no-debug-pkgs"):
                config["debug_pkgs"] = False
                break
            if case("--outdir", "-o"):
                if not os.path.isdir(v):
                    raise InvocationError("no such directory '%s'" % v)
                config["outdir"] = v
                break
            if case("--unpack", "-u"):
                config["action"] = "unpack"
                break
            if case("--prepare", "-p"):
                config["action"] = "prepare"
                break
            if case("--build", "-b"):
                config["action"] = "build"
                break
            if case("--install", "-i"):
                config["action"] = "install"
                break
            if case("--repackage", "-r"):
                config["action"] = "repackage"
                break
            if case("--packages"):
                config["packages"] = [x.strip() for x in v.split(",")]
                break
            if case("--build-for"):
                if not v in ["target", "tools", "cross-tools"]:
                    raise InvocationError("cannot build for '%s'." % v)
                config["build_for"] = v
                break
            if case("--work-dir"):
                if not os.path.isdir(v):
                    raise InvocationError("no such directory '%s'." % v)
                config["work_dir"] = v
                break
        #end switch
    #end for

    return config, args
#end function

if __name__ == "__main__":
    try:
        # PARSE CMD LINE
        options, args = parse_cmd_line()

        if len(args) != 1:
            print_usage()
            sys.exit(BOLT_ERR_INVOCATION)
        #end if

        # LOAD USER CONFIG
        config = AppConfig.load_user_config()
        config.update(options)

        # SET WORKING DIRECTORY
        if config["work_dir"]:
            try:
                os.chdir(config["work_dir"])
            except OSError as e:
                raise XPackError("failed to set working directory: " + str(e))
        #end if

        # RUN ACTION
        pkg_ctrl = PackageControl(args[0], config)
        pkg_ctrl(config["action"])
    except InvocationError as e:
        sys.stderr.write("bolt-pack: %s\n" % str(e))
        sys.exit(BOLT_ERR_INVOCATION)
    except XPackError as e:
        sys.stderr.write("bolt-pack: %s\n" % str(e))
        sys.exit(BOLT_ERR_RUNTIME)
    except KeyboardInterrupt:
        sys.stderr.write("Caught keyboard interrupt. Exiting.\n")
        sys.exit(0)
    #end try
#end __main__
