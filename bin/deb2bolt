#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
#
# The MIT License (MIT)
#
# Copyright (c) 2016 Tobias Koch <tobias.koch@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

import os
import sys
import getopt

# make deb2bolt relocatable
INSTALL_DIR = os.path.normpath(os.path.dirname(
    os.path.realpath(sys.argv[0])) + os.sep + ".." )
sys.path.insert(1, INSTALL_DIR + os.sep + 'lib')

from org.boltlinux.package.util import switch
from org.boltlinux.package.error import InvocationError
from org.boltlinux.deb2bolt.sourcepackage import SourcePackage

BOLT_VERSION = "1.0.0"
BOLT_ERR_INVOCATION = 1
BOLT_ERR_RUNTIME    = 2

def print_usage():
    print(
        "Debian to Bolt Source Package Converter, version %s                            \n"
        "Copyright (C) 2016-2017 Tobias Koch <tobias.koch@gmail.com>                 \n"
        "                                                                               \n"
        "USAGE:                                                                         \n"
        "                                                                               \n"
        "  deb2bolt [OPTIONS] <debian_control>                                          \n"
        "                                                                               \n"
        "OPTIONS:                                                                       \n"
        "                                                                               \n"
        "  --help, -h       Print this help message.                                    \n"
        "                                                                               \n"
        "  --gen-patches    Try to generate the patch tarball.                          \n"
        "  --use-orig       Look for an *.orig.tar.* tarball to use.                    \n"
        "  --do-all, -a     Do all of the above.                                        \n"
        "                                                                               \n"
        "  --set-maintainer Write maintainer info to changelog (initial import).        \n"
        "  --no-network     Don't download binary packages to examine contents.         \n"
        % BOLT_VERSION
    )
#end function

def parse_cmd_line():
    # define default configuration
    config = {
        "gen_patches": False,
        "use_orig": False,
        "use_network": True,
        "set_maintainer": False
    }

    try:
        opts, args = getopt.getopt(sys.argv[1:], "ha", ["help", "gen-patches",
            "use-orig", "do-all", "no-network", "set-maintainer"])
    except getopt.GetoptError as e:
        raise InvocationError("Error parsing command line: %s" % str(e))

    for o, v in opts:
        for case in switch(o):
            if case("--help", "-h"):
                print_usage()
                sys.exit(0)
                break
            if case("--gen-patches"):
                config["gen_patches"] = True
                break
            if case("--use-orig"):
                config["use_orig"] = True
                break
            if case("--no-network"):
                config["use_network"] = False
                break
            if case("--set-maintainer"):
                config["set_maintainer"] = True
                break
            if case("--do-all", "-a"):
                config["gen_patches"] = True
                config["use_orig"] = True
                break
        #end switch
    #end for

    return config, args
#end function

if __name__ == "__main__":
    try:
        # PARSE CMD LINE
        options, args = parse_cmd_line()

        if len(args) != 1:
            print_usage()
            sys.exit(BOLT_ERR_INVOCATION)
        #end if

        # RUN ACTION
        SourcePackage(args[0], use_network=options["use_network"])\
                .to_bolt(**options)
    except Exception as e:
        sys.stderr.write("deb2bolt: %s\n" % str(e))
        sys.exit(1)
#end __main__
